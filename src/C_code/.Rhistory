}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(int *a, int *b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double min_cpp (double a , double b){
if (a<b) return a;
return b;
}
double dist_cpp(int a[4834] , int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = min_cpp(countA,countB);
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(int a[4834] , int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double min_cpp (double a , double b){
if (a<b) return a;
return b;
}
double dist_cpp(int a[4834] , int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = countA+countB;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double min_cpp (double a , double b){
if (a<b) return a;
return b;
}
double dist_cpp(int a[4834] , int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a[4834] , int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a, int b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a, int b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a==b && a[i] != 0) res++;
if (a!=0) countA++;
if (b!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a, int b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a==b && a != 0) res++;
if (a!=0) countA++;
if (b!=0) countB++;
}
double mymin = 0;
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a, int b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a==b && a != 0) res++;
if (a!=0) countA++;
if (b!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp (int a[4834], int b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a==b && a != 0) res++;
if (a!=0) countA++;
if (b!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(int a[4834], int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
gc()
cppFunction("
double dist_cpp(int a[4834], int b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(double a[4834], double b[4834]){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(NumericArray<4834> a, NumericArray<4834> b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(int<4834> a, int<4834> b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(vector<4834>& a, vector<4834> b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
double dist_cpp(vector<4834>& a, vector<4834>& b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
cppFunction("
#include <vector>
double dist_cpp(vector<4834>& a, vector<4834>& b){
double res = 0;
double countA = 0;
double countB = 0;
for (int i = 0 ; i< 4834; i++){
if (a[i]==b[i] && a[i] != 0) res++;
if (a[i]!=0) countA++;
if (b[i]!=0) countB++;
}
double mymin;
if (countA<countB) {
mymin = countA;
} else {
mymin = countB;
}
if (mymin == 0) return 0;
res = res /mymin ;
return res;
}")
sourceCpp("dist_fuzcav.cpp")
sourceCpp("dist_fuzcav.cpp")
sourceCpp("dist_fuzcav.cpp")
sourceCpp("dist_fuzcav.cpp")
sourceCpp("dist_fuzcav.cpp")
.C("dist_fuzcav.cpp")
library(.C)
sourceCpp("dist_fuzcav.cpp")
dist_cpp(as.integer(dt_pharmacophores[1,]),as.integer(dt_pharmacophores[1,]))
dist_fuzcav(as.integer(dt_pharmacophores[1,]),as.integer(dt_pharmacophores[1,]))
as.integer(dt_pharmacophores[1,])
View(dist)
sourceCpp("dist_fuzcav.cpp")
dist_fuzcav_ph(as.integer(dt_pharmacophores[1,]),as.integer(dt_pharmacophores[1,]))
dist_fuzcav_ph(as.integer(dt_pharmacophores[1,]),as.integer(dt_pharmacophores[2,]))
sourceCpp("dist_fuzcav.cpp")
dist_fuzcav_ph(as.integer(dt_pharmacophores[1,]),as.integer(dt_pharmacophores[2,]))
dist_fuzcav_ph(dt_pharmacophores[1,],as.integer(dt_pharmacophores[2,]))
names_ligand
names_ligand[i]
dt[grep(paste0("_",paste0(names_ligand[i],"_"))
)
)
grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt))
index = sample(grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt)),2)
index
dist_ligs = rep(0,10)#length(unique(names_ligand)))
##fuzcav dist for pharmacophores ##
dt = as.data.frame(dt_pharmacophores)
dist_ligs = rep(0,10)#length(unique(names_ligand)))
for (i in 1:10){#length(unique(names_ligand))){
print(i)
print("voila")
index = sample(grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt)),2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
##fuzcav dist for pharmacophores ##
dt = as.data.frame(dt_pharmacophores)
dist_ligs = rep(0,10)#length(unique(names_ligand)))
for (i in 1:10){#length(unique(names_ligand))){
print(i)
print("voila")
index = grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt))
if(length(index) > 1) {
index = sample(index,2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
}
hist(dist_ligs)
##fuzcav dist for pharmacophores ##
dt = as.data.frame(dt_pharmacophores)
dist_ligs = rep(0,1000)#length(unique(names_ligand)))
for (i in 1:10){#length(unique(names_ligand))){
print(i)
print("voila")
index = grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt))
if(length(index) > 1) {
index = sample(index,2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
}
dist_ligs = rep(0,1000)#length(unique(names_ligand)))
for (i in 1:1000){#length(unique(names_ligand))){
print(i)
print("voila")
index = grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt))
if(length(index) > 1) {
index = sample(index,2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
}
hist(dist_ligs)
d_lig = density(dist_ligs)
plot(d_lig)
names_ligand[i]
grep(paste0("_",paste0(names_ligand[i],"_")),rownames(dt))
names_ligand
names_ligand_unique
names_ligand_unique = unique(names_ligand)
dist_ligs = rep(0,1000)#length(unique(names_ligand)))
for (i in 1:1000){#length(unique(names_ligand))){
print(i)
print("voila")
index = grep(paste0("_",paste0(names_ligand_unique[i],"_")),rownames(dt))
if(length(index) > 1) {
index = sample(index,2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
}
hist(dist_ligs)
d_lig = density(dist_ligs)
plot(d_lig)
names_ligand_unique[i]
grep(paste0("_",paste0(names_ligand_unique[i],"_")),rownames(dt))
index = grep(paste0("_",paste0(names_ligand_unique["HEM"],"_")),rownames(dt))
index
names_ligand_unique
names_ligand_unique["HEM"]
names_ligand_unique["CRT"]
names_ligand_unique[993]
which(names_ligand_unique == "HEM")
index = grep(paste0("_",paste0(names_ligand_unique[13],"_")),rownames(dt))
index
length(index)
index = sample(index,2)
index
dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
index[1]
index[2]
as.integer(dt[index[2],])
dt[index[1]
,]
as.integer(dt[index[1],])
#check results
v_ph_1 = dt[index[1],]
v_ph_2 = dt[index[2],]
t = table(v_ph_1, v_ph_2)
common_non_null = sum(t[2:nrow(t),2:ncol(t)])
non_null_counts_Fa = sum(t[2:nrow(t),])
#check results
v_ph_1 = dt[index[1],]
v_ph_2 = dt[index[2],]
t = table(v_ph_1, v_ph_2)
#check results
v_ph_1 = as.integer(dt[index[1],])
v_ph_2 = as.integer(dt[index[2],])
t = table(v_ph_1, v_ph_2)
common_non_null = sum(t[2:nrow(t),2:ncol(t)])
non_null_counts_Fa = sum(t[2:nrow(t),])
non_null_counts_Fb = sum(t[,2:ncol(t)])
val_similarity = common_non_null/min(non_null_counts_Fa,non_null_counts_Fb)
val_similarity
dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
1-val_similarity
dist_ligs = rep(0,1000)#length(unique(names_ligand)))
for (i in 1:1000){#length(unique(names_ligand))){
print(i)
print("voila")
index = grep(paste0("_",paste0(names_ligand_unique[i],"_")),rownames(dt))
if(length(index) > 1) {
index = sample(1:nrow(dt),2)
dist_ligs[i] = dist_fuzcav_ph(as.integer(dt[index[1],]), as.integer(dt[index[2],]))
}
}
d_lig = density(dist_ligs)
plot(d_lig)
plot(table_names_ligand)
